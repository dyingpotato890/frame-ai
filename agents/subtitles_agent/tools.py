import os
import shutil
from moviepy.editor import VideoFileClip
from faster_whisper import WhisperModel

def _format_timestamp(seconds: float) -> str:
    """
    Formats a time in seconds to SRT timestamp format (HH:MM:SS,ms).
    """
    milliseconds = round(seconds * 1000.0)
    hours = milliseconds // 3_600_000
    milliseconds %= 3_600_000
    minutes = milliseconds // 60_000
    milliseconds %= 60_000
    seconds = milliseconds // 1_000
    milliseconds %= 1_000
    return f"{hours:02}:{minutes:02}:{seconds:02},{milliseconds:03}"

def generate_subtitles(input_shorts_dir: str = "temp_shorts"):
    """
    This agent processes short video files, generates SRT subtitles,
    and moves the video and SRT file into new, dedicated folders
    within the user's Downloads directory.

    Args:
        input_shorts_dir (str): The directory where the short video files
                                 (generated by another agent) are located.
    """
    script_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.dirname(os.path.dirname(script_dir))
    output_downloads_dir = os.path.join(project_root, "downloads")

    # Load the Whisper model once
    # "base" is a good balance for accuracy and speed on CPU.
    # Use "cuda" for GPU if available and properly configured.
    print("Loading Whisper model (this may take a moment)...")
    try:
        model = WhisperModel("base", device="cpu", compute_type="int8") # Try "cuda" if you have GPU
        print("Whisper model loaded.")
    except Exception as e:
        print(f"Error loading Whisper model: {e}. Please ensure you have the necessary dependencies.")
        print("For GPU support, ensure CUDA is installed and configure faster-whisper correctly.")
        return

    print(f"\nSubtitles Agent started. Looking for shorts in: {input_shorts_dir}")
    
    # Ensure the input directory exists
    if not os.path.isdir(input_shorts_dir):
        print(f"Error: Input directory '{input_shorts_dir}' does not exist.")
        return

    video_files = [f for f in os.listdir(input_shorts_dir) if f.lower().endswith(('.mp4', '.avi', '.mov', '.mkv'))]

    if not video_files:
        print(f"No video files found in {input_shorts_dir}.")
        return

    for video_file in video_files:
        video_path = os.path.join(input_shorts_dir, video_file)
        video_name_without_ext = os.path.splitext(video_file)[0]
        
        # Define paths for audio, SRT, and new output folder
        audio_path = os.path.join(input_shorts_dir, f"{video_name_without_ext}.wav")
        srt_filename = f"{video_name_without_ext}.srt"
        
        output_folder_name = f"{video_name_without_ext}_output"
        output_folder_path = os.path.join(output_downloads_dir, output_folder_name)
        
        os.makedirs(output_folder_path, exist_ok=True)
        print(f"\nProcessing '{video_file}'...")
        print(f"Created output folder: {output_folder_path}")

        try:
            # 1. Extract audio from video
            print("Extracting audio...")
            video_clip = VideoFileClip(video_path)
            video_clip.audio.write_audiofile(audio_path) # type: ignore
            video_clip.close() # Important to close the clip
            print("Audio extraction complete.")

            # 2. Transcribe audio and generate SRT
            print("Transcribing audio...")
            segments, info = model.transcribe(audio_path, beam_size=5) # You can adjust beam_size

            srt_content = []
            segment_id = 1
            for segment in segments:
                start_time_str = _format_timestamp(segment.start)
                end_time_str = _format_timestamp(segment.end)
                text = segment.text.strip()
                
                srt_content.append(str(segment_id))
                srt_content.append(f"{start_time_str} --> {end_time_str}")
                srt_content.append(text)
                srt_content.append("") # Empty line separates entries
                segment_id += 1

            srt_path = os.path.join(output_folder_path, srt_filename)
            with open(srt_path, "w", encoding="utf-8") as f:
                f.write("\n".join(srt_content))
            print(f"SRT file generated: {srt_path}")

            # 3. Move the original short video to the new folder
            destination_video_path = os.path.join(output_folder_path, video_file)
            shutil.move(video_path, destination_video_path)
            print(f"Moved video to: {destination_video_path}")

        except Exception as e:
            print(f"Error processing {video_file}: {e}")
        finally:
            # Clean up temporary audio file
            if os.path.exists(audio_path):
                os.remove(audio_path)
                print(f"Removed temporary audio file: {audio_path}")

    print("\nSubtitles Agent finished processing all shorts.")